{"version":3,"file":"static/js/363.c26215d1.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css?c3a9","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/AddPostForm.module.css?9014","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/EditableSpan.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\",\"photo\":\"ProfileInfo_photo__xlmyX\",\"ava\":\"ProfileInfo_ava__Zv058\",\"name\":\"ProfileInfo_name__nzLXx\"};","// extracted by mini-css-extract-plugin\nexport default {\"pagination\":\"ProfileStatus_pagination__7qIxf\",\"inputPagination\":\"ProfileStatus_inputPagination__n0Rtv\",\"statusBlock\":\"ProfileStatus_statusBlock__bfH6I\"};","import React from \"react\";\nimport s from './ProfileStatus.module.css'\nimport {EditableSpan} from \"../../../common/EditableSpan\";\ntype ProfileStatusPropsType={\n    status:string,\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatus = React.memo((props:ProfileStatusPropsType) => {\n    const onKeyPress = (e: React.KeyboardEvent<HTMLInputElement>, inputTitle: string) => {\n        if (e.key === 'Enter' && inputTitle.length < 300) props.updateStatus(inputTitle)}\n    return (\n        <div >\n            <EditableSpan className={s} defaultInputTitleValue={props.status? props.status:''}\n                          verificationRule={value => value.length<=300}\n                          labelText={props.status? props.status: 'no status'}\n                          onKeyPress={onKeyPress} id='profileStatus'/>\n        </div>\n    )\n\n})","import React from \"react\";\nimport s from './ProfileInfo.module.css'\nimport {Preloader} from \"../../common/Preloader\";\nimport user from '../../../assets/images/user.svg'\nimport {ProfileInfoType} from \"../../../Redux/redux_store\";\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\";\ntype ProfileInfoProType = {\n    profileInfo: ProfileInfoType,\n    status: string,\n    updateStatus: (status: string) => void\n}\nexport const ProfileInfo = (props: ProfileInfoProType) => {\n    if (!props.profileInfo) return <Preloader/>\n   return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img className={s.ava} src={props.profileInfo.photos.large ? props.profileInfo.photos.large :\n                    props.profileInfo.photos.small ? props.profileInfo.photos.small: user}\n                     alt='photo'/>\n                <div className={s.name}>{props.profileInfo.fullName}</div>\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\n\n            </div>\n        </div>\n    )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\",\"ava\":\"Post_ava__A2+Jl\",\"like\":\"Post_like__+fQP+\",\"likesCount\":\"Post_likesCount__LXQiZ\"};","import React from \"react\";\nimport s from './Post.module.css'\nimport ava from '../../../../assets/images/user.svg'\nimport like from '../../../../assets/images/like.png'\nexport type PostPropsType={\n    message:string\n    likesCount:number\n}\nexport const Post = (props:PostPropsType) => {\n    return (\n        <div className={s.item}>\n            <img className={s.ava} src={ava} alt={'avatar'}/>\n            {props.message}\n            <img className={s.like} src={like} alt={'like'}/> <span className={s.likesCount}>{props.likesCount}</span>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"AddPostForm_button__Z31rM\",\"form\":\"AddPostForm_form__U9GxI\",\"input\":\"AddPostForm_input__m7kvD\"};","import {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Field, InjectedFormProps} from \"redux-form\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport React from \"react\";\nimport s from './AddPostForm.module.css'\n\nconst maxLength30 = maxLengthCreator(30)\nexport const AddPostForm = (props: InjectedFormProps) => {\n    return (\n        <form className={s.form} onSubmit={props.handleSubmit}>\n            <div>\n                <button className={s.button}>Add post</button>\n            </div>\n            <div><Field className={s.input} component={Textarea} name='postTextArea' placeholder='Post message'\n                        validate={[required, maxLength30]}></Field></div>\n        </form>\n    )\n}","import React from \"react\";\nimport s from './MyPosts.module.css'\nimport {Post} from \"./Post/Post\";\n\nimport {PostDataType} from \"../../../Redux/redux_store\";\nimport {reduxForm} from \"redux-form\";\nimport {AddPostForm} from \"./AddPostForm\";\n\ntype MyPostsPropsType = {\n    postData: PostDataType[],\n    newPostTitle:string,\n    addPostHandler: (newPost:string) => void\n}\n\nexport const MyPosts=React.memo((props: MyPostsPropsType)=> {\n    let postsElements = props.postData.map(post =>\n        <Post key={post.id} message={post.message}\n              likesCount={post.likesCount}/>)\n    const addNewPost = (values: any) => {\n        props.addPostHandler(values.postTextArea)\n    }\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div>\n                <AddPostFormRedux onSubmit={addNewPost}/>\n            </div>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n})\n\nconst AddPostFormRedux=reduxForm({form:'profileAddPostForm'})(AddPostForm)","import {connect} from \"react-redux\";\nimport {MyPosts} from \"./MyPosts\";\nimport {addPost} from \"../../../Redux/profile_reducer\";\nimport {ActionType, StateType} from \"../../../Redux/redux_store\";\nconst mapStateToProps=(state:StateType)=>({\n    postData: state.profilePage.postsData,\n    newPostTitle: state.profilePage.newPostTitle,\n    })\nconst mapDispatchToProps=(dispatch:(action:ActionType)=>void)=>{\n    return {\n        addPostHandler:(newPost:string)=>dispatch(addPost(newPost))\n    }\n}\nexport const MyPostsContainer=connect(mapStateToProps,mapDispatchToProps)(MyPosts)","// extracted by mini-css-extract-plugin\nexport default {\"photo\":\"Profile_photo__KnLdO\",\"profile\":\"Profile_profile__VHbzQ\"};","import React from \"react\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileInfoType} from \"../../Redux/redux_store\";\nimport s from './Profile.module.css'\n\ntype ProfileType = {\n    profileInfo: ProfileInfoType,\n    status: string,\n    updateStatus: (status: string) => void\n}\nexport const Profile = (props: ProfileType) => {\n    return (\n        <div className={s.profile}>\n            <ProfileInfo profileInfo={props.profileInfo} status={props.status} updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}","import React, {ReactNode} from \"react\";\nimport {ProfileInfoType, StateType} from \"../../Redux/redux_store\";\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getProfile, getStatus, updateStatus} from \"../../Redux/profile_reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nexport type ProfilePropsType = {\n    status: string,\n    profileInfo: ProfileInfoType,\n    userId: number,\n    getProfile: (userID: number) => void,\n    getStatus: (userID: number) => void,\n    updateStatus: (status:string) => void,\n}\ntype RoutePropsType = RouteComponentProps<{ id: string }> & ProfilePropsType\n\nclass ProfileContainer extends React.Component<RoutePropsType, { children?: ReactNode }> {\n    componentDidMount() {\n        const id = !this.props.match.params.id ? this.props.userId? this.props.userId :\n            this.props.history.push('/login'): this.props.match.params.id\n        this.props.getProfile(+id)\n        this.props.getStatus(+id)\n    }\n    render() {\n        return (\n            <Profile profileInfo={this.props.profileInfo} status={this.props.status} updateStatus={this.props.updateStatus}/>\n        )\n    }\n}\nconst mapStateToProps = (state: StateType) =>\n    ({profileInfo: state.profilePage.profileInfo, status:state.profilePage.status, userId:state.auth.id});\nexport default compose<React.ElementType>(connect(mapStateToProps, {getProfile, getStatus, updateStatus}),\n    withRouter, withAuthRedirect)(ProfileContainer)\n","import React, {ChangeEvent, useState} from \"react\";\nimport {CSSType} from \"./Pagination\";\n\ntype EditableSpanPropsType = {\n    id:string\n    defaultInputTitleValue: string\n    labelText: string\n    onKeyPress: (e:React.KeyboardEvent<HTMLInputElement>,inputTitle:string)=>void\n    verificationRule:(value:string)=>boolean,\n    className:CSSType\n}\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n    const [inputTitle, setInputTitle] = useState(props.defaultInputTitleValue);\n    const [editableSpanVision, setEditableSpanVision] = useState(false);\n    return (\n        editableSpanVision ?\n            <input id={props.id} className={props.className.inputPagination} autoFocus={true} value={inputTitle}\n                   onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                       const value: string | null = e.currentTarget.value\n                       if (props.verificationRule(value)) setInputTitle(value)\n                   }}\n                   onKeyPress={(e:React.KeyboardEvent<HTMLInputElement>)=>{props.onKeyPress(e, inputTitle)\n                       if (e.key==='Enter') {setEditableSpanVision(!editableSpanVision);\n                       setInputTitle('1')}\n            }}\n                   onBlur={() => {\n                       setEditableSpanVision(!editableSpanVision);\n                       setInputTitle('1')\n                   }} title='Type and press Enter'/> :\n            <span className={props.className.pagination} onClick={() => {\n                setEditableSpanVision(!editableSpanVision);\n                setInputTitle(props.defaultInputTitleValue)\n            }}> {props.labelText} </span>)\n})","import {Redirect} from \"react-router-dom\";\nimport React, {ComponentType} from \"react\";\nimport {StateType} from \"../Redux/redux_store\";\nimport {connect} from \"react-redux\";\ntype mapSTPType = {isAuth:boolean}\n\nconst mapSTP=(state:StateType):mapSTPType=>({isAuth: !!state.auth.login})\nexport function withAuthRedirect<P>(Component:ComponentType<P>) {\n    function RedirectComponent(props:mapSTPType) {\n        const {isAuth, ...restProps}= props\n        if (!props.isAuth) return <Redirect to='/login'/>\n        return <Component {...restProps as P}/>\n    }\n    return connect(mapSTP)(RedirectComponent)\n}\n\n"],"names":["ProfileStatus","React","props","EditableSpan","className","s","defaultInputTitleValue","status","verificationRule","value","length","labelText","onKeyPress","e","inputTitle","key","updateStatus","id","ProfileInfo","profileInfo","src","photos","large","small","user","alt","fullName","Preloader","Post","ava","message","like","likesCount","maxLength30","maxLengthCreator","MyPosts","postsElements","postData","map","post","AddPostFormRedux","onSubmit","values","addPostHandler","postTextArea","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","postsData","newPostTitle","dispatch","newPost","addPost","Profile","ProfileContainer","this","match","params","userId","history","push","getProfile","getStatus","compose","auth","withRouter","withAuthRedirect","useState","setInputTitle","editableSpanVision","setEditableSpanVision","inputPagination","autoFocus","onChange","currentTarget","onBlur","title","pagination","onClick","mapSTP","isAuth","login","Component","restProps","to"],"sourceRoot":""}