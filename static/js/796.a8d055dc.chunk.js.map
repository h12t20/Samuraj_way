{"version":3,"file":"static/js/796.a8d055dc.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css?c3a9","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/Contacts.tsx","components/Profile/ProfileInfo/ProfileViewMode.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfileInfo/ProfileEditMode.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/AddPostForm.module.css?9014","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/EditableSpan.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\",\"photo\":\"ProfileInfo_photo__xlmyX\",\"ava\":\"ProfileInfo_ava__Zv058\",\"field\":\"ProfileInfo_field__OzsyD\",\"mainPhotoContainer\":\"ProfileInfo_mainPhotoContainer__YXpak\",\"sendPhotoInput\":\"ProfileInfo_sendPhotoInput__hphow\",\"label\":\"ProfileInfo_label__uB94b\",\"mouseOver\":\"ProfileInfo_mouseOver__r3fMs\",\"labelContainer\":\"ProfileInfo_labelContainer__BbCzm\",\"contactBlock\":\"ProfileInfo_contactBlock__hCtlp\",\"contactValue\":\"ProfileInfo_contactValue__OfJqv\",\"edit\":\"ProfileInfo_edit__AexGA\",\"editBlock\":\"ProfileInfo_editBlock__SvgJH\",\"container\":\"ProfileInfo_container__oYTAE\",\"contacts\":\"ProfileInfo_contacts__hKq1Z\",\"viewModes\":\"ProfileInfo_viewModes__0DwJZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"pagination\":\"ProfileStatus_pagination__7qIxf\",\"inputPagination\":\"ProfileStatus_inputPagination__n0Rtv\",\"statusBlock\":\"ProfileStatus_statusBlock__bfH6I\"};","import React from \"react\";\nimport s from './ProfileStatus.module.css'\nimport {EditableSpan} from \"../../../common/EditableSpan\";\ntype ProfileStatusPropsType={\n    status:string,\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatus = React.memo((props:ProfileStatusPropsType) => {\n    const onKeyPress = (e: React.KeyboardEvent<HTMLInputElement>, inputTitle: string) => {\n        if (e.key === 'Enter' && inputTitle.length < 300) props.updateStatus(inputTitle)}\n    return (\n        <div>Status:\n            <EditableSpan className={s} defaultInputTitleValue={props.status? props.status:''}\n                          verificationRule={value => value.length<=200}\n                          labelText={props.status? props.status: 'no status'}\n                          onKeyPress={onKeyPress} id='profileStatus'/>\n        </div>\n    )\n\n})","import {ContactType} from \"../../../Redux/redux_store\";\nimport s from \"./ProfileInfo.module.css\";\nimport React from \"react\";\n\nexport const Contacts = (props: ContactType) => {\n    let arrayJSX: JSX.Element[] = []\n    for (let i = 0; i < Object.keys(props).length; i++) {\n        if (Object.entries(props)[i][1])\n            arrayJSX.push(<div><span>{Object.entries(props)[i][0]}</span>: <span className={s.contactValue}>\n                {Object.entries(props)[i][1]}</span></div>)\n    }\n    return (<div className={s.contactBlock}>\n            {arrayJSX.length>0 && 'Contacts: '}\n            {arrayJSX.map(jsx => <div className={s.contacts} key={arrayJSX.indexOf(jsx)}>{jsx}</div>)}\n        </div>\n    )\n}","import {ProfileInfoType} from \"../../../Redux/redux_store\";\nimport s from \"./ProfileInfo.module.css\";\nimport {Contacts} from \"./Contacts\";\nimport React, {useEffect} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {setFormSubmitStatus} from \"../../../Redux/profile_reducer\";\n\nexport const ProfileViewMode = (props: {profile: ProfileInfoType, isOwner:boolean, setToEditMode:()=>void}) => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(setFormSubmitStatus(false))\n    }, []);\n    return (\n        <div className={s.container}>\n            <div className={s.name}>Full name: <span className={s.contactValue}>{props.profile.fullName}</span></div>\n            <div>Looking for a job: <span className={s.contactValue}>{props.profile.lookingForAJob ? 'Yes' : 'No'}</span></div>\n            {props.profile.lookingForAJob ?\n                <div>Desired job: <span className={s.contactValue}>{props.profile.lookingForAJobDescription}</span></div> : null}\n            {props.profile.aboutMe ? <div>About me: <span className={s.contactValue}>{props.profile.aboutMe}</span></div> : null}\n            <div><Contacts {...props.profile.contacts}/></div>\n            {props.isOwner && <div className={s.editBlock}><div className={s.edit} onClick={props.setToEditMode}>Edit</div></div>}\n        </div>\n    )\n}","import React, {ChangeEvent, useEffect, useRef} from \"react\";\nimport s from './ProfileInfo.module.css'\nimport {Preloader} from \"../../common/Preloader\";\nimport user from '../../../assets/images/user.svg'\nimport {ProfileInfoType} from \"../../../Redux/redux_store\";\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\";\nimport {ProfileViewMode} from \"./ProfileViewMode\";\nimport {reduxForm} from \"redux-form\";\nimport {connect, useDispatch} from \"react-redux\";\nimport {updateProfile} from \"../../../Redux/profile_reducer\";\nimport {ProfileEditMode} from \"./ProfileEditMode\";\n\ntype ProfileInfoPropsType = {\n    isOwner: boolean\n    profileInfo: ProfileInfoType,\n    status: string,\n    updateStatus: (status: string) => void,\n    savePhoto: (file: File) => void,\n    profileEditMode: boolean,\n    setProfileEditMode: (mode:boolean)=>void,\n    isFormSubmitSuccess: boolean\n}\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files) props.savePhoto(e.target.files[0])\n    }\n    const inputRef = useRef<HTMLInputElement>(null);\n    const imgRef = useRef<HTMLImageElement>(null);\n\n    function handleClick() {\n        inputRef && inputRef.current?.click()\n    }\n\n    function mouseOverHandler() {\n        if (props.isOwner && imgRef.current) {\n           imgRef.current.className = s.mouseOver}\n    }\n\n    function mouseLeaveHandler() {\n        if (props.isOwner && imgRef.current) {imgRef.current.className = s.label}\n    }\n\n    if (!props.profileInfo) return <Preloader/>\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <div onMouseOver={mouseOverHandler} onMouseLeave={mouseLeaveHandler}\n                     className={s.mainPhotoContainer} style={props.isOwner? {cursor:'pointer'}:undefined} onClick={handleClick}>\n                    <img className={s.ava} src={props.profileInfo.photos.large ? props.profileInfo.photos.large :\n                        props.profileInfo.photos.small ? props.profileInfo.photos.small : user}\n                         alt='photo'/></div>\n                <div>\n                <div className={s.labelContainer}>{props.isOwner &&\n                    <div className={s.label} ref={imgRef}>Press to refresh</div>}</div>\n                  <div className={s.viewModes}>  {props.profileEditMode?\n                      <ProfileEdit setViewMode={\n                      ()=>props.setProfileEditMode(false)} profile={props.profileInfo} profileEditMode={props.profileEditMode}\n                                                                                      isFormSubmitSuccess = {props.isFormSubmitSuccess}/>:\n                        <ProfileViewMode profile={props.profileInfo} isOwner={props.isOwner} setToEditMode={\n                            ()=>props.setProfileEditMode(true)}/>}\n                  </div>\n\n                {props.isOwner &&\n                    <div><input className={s.sendPhotoInput} type=\"file\" accept={'image/*'} ref={inputRef} onChange={onMainPhotoSelected}/>\n                    </div>}\n                </div>\n            </div>\n            <div className={s.descriptionBlock}>{props.isOwner? <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>:\n                <div>Status: <span className={s.contactValue}>{props.status? props.status: 'No status'}</span></div> }</div>\n        </div>\n    )\n}\n\nconst ProfileReduxForm = reduxForm<ProfileInfoType>({form: 'profile'})(ProfileEditMode)\nconst ProfileEdit = (props: {profile: ProfileInfoType, setViewMode: ()=>void, profileEditMode:boolean, isFormSubmitSuccess: boolean} ) => {\n    useEffect(() => {\n        if (props.isFormSubmitSuccess && props.profileEditMode) props.setViewMode()\n    }, [props.isFormSubmitSuccess, props.profileEditMode]);\n    const dispatch=useDispatch()\n    const onSubmit = async (formData: ProfileInfoType) => {\n       dispatch(updateProfile(formData))\n    }\n    return (\n        <div className={s.container}>\n                <ProfileReduxForm onSubmit={onSubmit} initialValues={props.profile}/>\n        </div>\n    )\n}\nexport default connect(null, {updateProfile})(ProfileEdit)","import {Field, InjectedFormProps} from \"redux-form\";\nimport {ProfileInfoType} from \"../../../Redux/redux_store\";\nimport s from \"./ProfileInfo.module.css\";\nimport {Input, Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {maxLength200, maxLength50} from \"../../Login/Login\";\nimport {required} from \"../../../utils/validators/validators\";\nimport React from \"react\";\n\nexport const ProfileEditMode = (props: InjectedFormProps<ProfileInfoType>) => {\n    const {contacts} = props.initialValues\n    let arrayJSX: JSX.Element[] = [];\n    if (contacts) for (let i = 0; i < Object.keys(contacts).length; i++) {\n        arrayJSX.push(<div className={s.field}><span>{Object.entries(contacts)[i][0]}</span> <span\n            className={s.contactValue}>\n                <Field autoComplete={'on'} placeholder={Object.entries(contacts)[i][0]}\n                       name={'contacts.' + Object.entries(contacts)[i][0]}\n                       component={Input} validate={[maxLength50]} className={s.field}/></span></div>)\n    }\n    return (\n        <form className={s.container} onSubmit={props.handleSubmit}>\n            <div className={s.field}>Full name: <Field autoComplete={'on'} placeholder={'Full name'} name={'fullName'}\n                                                       component={Input} validate={[required, maxLength50]}\n                                                       className={s.field}/></div>\n            <div className={s.field}>Looking for a job: <Field placeholder={'Looking for a job'}\n                                                               name={'lookingForAJob'} component={Input}\n                                                               props={{type: 'checkbox'}}\n                                                               validate={[]} className={s.field}/></div>\n            <div className={s.field}>Desired job: <Field autoComplete={'on'} placeholder={'Desired job'}\n                                                         name={'lookingForAJobDescription'} component={Textarea}\n                                                         validate={[maxLength200]} className={s.field}/></div>\n            <div className={s.field}>About me: <Field autoComplete={'on'} placeholder={'About me'} name={'aboutMe'}\n                                                      component={Textarea} validate={[maxLength200]}\n                                                      className={s.field}/></div>\n            <div className={s.contactBlock}>\n                {arrayJSX.length > 0 && 'Contacts: '}\n                {arrayJSX.map(jsx => <div className={s.contacts} key={arrayJSX.indexOf(jsx)}>{jsx}</div>)}\n            </div>\n            <div>\n                <button style={{borderRadius: 7}}>Save</button>\n            </div>\n        </form>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\",\"ava\":\"Post_ava__A2+Jl\",\"like\":\"Post_like__+fQP+\",\"likesCount\":\"Post_likesCount__LXQiZ\"};","import React from \"react\";\nimport s from './Post.module.css'\nimport ava from '../../../../assets/images/user.svg'\nimport like from '../../../../assets/images/like.png'\nexport type PostPropsType={\n    message:string\n    likesCount:number\n}\nexport const Post = (props:PostPropsType) => {\n    return (\n        <div className={s.item}>\n            <img className={s.ava} src={ava} alt={'avatar'}/>\n            {props.message}\n            <img className={s.like} src={like} alt={'like'}/> <span className={s.likesCount}>{props.likesCount}</span>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"AddPostForm_button__Z31rM\",\"form\":\"AddPostForm_form__U9GxI\",\"input\":\"AddPostForm_input__m7kvD\"};","import {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Field, InjectedFormProps} from \"redux-form\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport React from \"react\";\nimport s from './AddPostForm.module.css'\n\nconst maxLength30 = maxLengthCreator(30)\nexport const AddPostForm = (props: InjectedFormProps) => {\n    return (\n        <form className={s.form} onSubmit={props.handleSubmit}>\n            <div>\n                <button className={s.button}>Add post</button>\n            </div>\n            <div><Field className={s.input} component={Textarea} name='postTextArea' placeholder='Post message'\n                        validate={[required, maxLength30]}></Field></div>\n        </form>\n    )\n}","import React from \"react\";\nimport s from './MyPosts.module.css'\nimport {Post} from \"./Post/Post\";\n\nimport {PostDataType} from \"../../../Redux/redux_store\";\nimport {reduxForm} from \"redux-form\";\nimport {AddPostForm} from \"./AddPostForm\";\n\ntype MyPostsPropsType = {\n    postData: PostDataType[],\n    newPostTitle:string,\n    addPostHandler: (newPost:string) => void\n}\n\nexport const MyPosts=React.memo((props: MyPostsPropsType)=> {\n    let postsElements = props.postData.map(post =>\n        <Post key={post.id} message={post.message}\n              likesCount={post.likesCount}/>)\n    const addNewPost = (values: any) => {\n        props.addPostHandler(values.postTextArea)\n    }\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div>\n                <AddPostFormRedux onSubmit={addNewPost}/>\n            </div>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n})\n\nconst AddPostFormRedux=reduxForm({form:'profileAddPostForm'})(AddPostForm)","import {connect} from \"react-redux\";\nimport {MyPosts} from \"./MyPosts\";\nimport {addPost} from \"../../../Redux/profile_reducer\";\nimport {ActionType, StateType} from \"../../../Redux/redux_store\";\nconst mapStateToProps=(state:StateType)=>({\n    postData: state.profilePage.postsData,\n    newPostTitle: state.profilePage.newPostTitle,\n    })\nconst mapDispatchToProps=(dispatch:(action:ActionType)=>void)=>{\n    return {\n        addPostHandler:(newPost:string)=>dispatch(addPost(newPost))\n    }\n}\nexport const MyPostsContainer=connect(mapStateToProps,mapDispatchToProps)(MyPosts)","// extracted by mini-css-extract-plugin\nexport default {\"photo\":\"Profile_photo__KnLdO\",\"profile\":\"Profile_profile__VHbzQ\"};","import React from \"react\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileInfoType} from \"../../Redux/redux_store\";\nimport s from './Profile.module.css'\n\ntype ProfileType = {\n    isOwner:boolean\n    profileInfo: ProfileInfoType,\n    status: string,\n    updateStatus: (status: string) => void,\n    savePhoto: (file: File)=>void,\n    profileEditMode: boolean,\n    setProfileEditMode: (mode:boolean)=>void,\n    isFormSubmitSuccess: boolean\n}\nexport const Profile = (props: ProfileType) => {\n    return (\n        <div className={s.profile}>\n            <ProfileInfo savePhoto={props.savePhoto} isOwner = {props.isOwner} profileInfo={props.profileInfo}\n                         status={props.status} updateStatus={props.updateStatus} profileEditMode={props.profileEditMode}\n                         setProfileEditMode={props.setProfileEditMode} isFormSubmitSuccess = {props.isFormSubmitSuccess}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}","import React, {ReactNode} from \"react\";\nimport {ProfileInfoType, StateType} from \"../../Redux/redux_store\";\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getProfile, getStatus, savePhoto, setProfileEditMode, updateStatus} from \"../../Redux/profile_reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nexport type ProfilePropsType = {\n    status: string,\n    profileInfo: ProfileInfoType,\n    userId: number,\n    getProfile: (userID: number) => void,\n    getStatus: (userID: number) => void,\n    updateStatus: (status:string) => void,\n    savePhoto: (file: File)=>void,\n    profileEditMode: boolean,\n    setProfileEditMode: (mode:boolean)=>void,\n    isFormSubmitSuccess: boolean\n}\ntype RoutePropsType = RouteComponentProps<{ id: string }> & ProfilePropsType\n\nclass ProfileContainer extends React.Component<RoutePropsType, { children?: ReactNode }> {\n    refreshProfile() {\n        const id = !this.props.match.params.id ? this.props.userId? this.props.userId :\n            this.props.history.push('/login'): this.props.match.params.id\n        this.props.getProfile(+id)\n        this.props.getStatus(+id)\n    }\n    componentDidMount() {\n        this.refreshProfile()\n    }\n    componentDidUpdate(prevProps: Readonly<RoutePropsType>, prevState: Readonly<{\n        children?: React.ReactNode\n    }>, snapshot?: any) {\n        if (this.props.match.params.id !== prevProps.match.params.id) this.refreshProfile()\n    }\n\n    render() {\n        return (\n            <Profile isOwner={!this.props.match.params.id} profileInfo={this.props.profileInfo}\n                     status={this.props.status} updateStatus={this.props.updateStatus} savePhoto={this.props.savePhoto}\n                     setProfileEditMode={this.props.setProfileEditMode} profileEditMode={this.props.profileEditMode}\n            isFormSubmitSuccess = {this.props.isFormSubmitSuccess}/>\n        )\n    }\n}\nconst mapStateToProps = (state: StateType) =>\n    ({profileInfo: state.profilePage.profileInfo, status:state.profilePage.status, userId:state.auth.id,\n        profileEditMode: state.profilePage.profileEditMode, isFormSubmitSuccess: state.profilePage.isFormSubmitSuccess});\nexport default compose<React.ElementType>(connect(mapStateToProps,\n        {getProfile, getStatus, updateStatus, savePhoto, setProfileEditMode}),\n    withRouter, withAuthRedirect)(ProfileContainer)\n","import React, {ChangeEvent, useState} from \"react\";\nimport {CSSType} from \"./Pagination\";\n\ntype EditableSpanPropsType = {\n    id:string\n    defaultInputTitleValue: string\n    labelText: string\n    onKeyPress: (e:React.KeyboardEvent<HTMLInputElement>,inputTitle:string)=>void\n    verificationRule:(value:string)=>boolean,\n    className:CSSType\n}\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n    const [inputTitle, setInputTitle] = useState(props.defaultInputTitleValue);\n    const [editableSpanVision, setEditableSpanVision] = useState(false);\n    return (\n        editableSpanVision ?\n            <input id={props.id} className={props.className.inputPagination} autoFocus={true} value={inputTitle}\n                   onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                       const value: string | null = e.currentTarget.value\n                       if (props.verificationRule(value)) setInputTitle(value)\n                   }}\n                   onKeyPress={(e:React.KeyboardEvent<HTMLInputElement>)=>{props.onKeyPress(e, inputTitle)\n                       if (e.key==='Enter') {setEditableSpanVision(!editableSpanVision);\n                       setInputTitle('1')}\n            }}\n                   onBlur={() => {\n                       setEditableSpanVision(!editableSpanVision);\n                       setInputTitle('1')\n                   }} title='Type and press Enter'/> :\n            <span className={props.className.pagination} onClick={() => {\n                setEditableSpanVision(!editableSpanVision);\n                setInputTitle(props.defaultInputTitleValue)\n            }}> {props.labelText} </span>)\n})","import {Redirect} from \"react-router-dom\";\nimport React, {ComponentType} from \"react\";\nimport {StateType} from \"../Redux/redux_store\";\nimport {connect} from \"react-redux\";\ntype mapSTPType = {isAuth:boolean}\n\nconst mapSTP=(state:StateType):mapSTPType=>({isAuth: !!state.auth.login})\nexport function withAuthRedirect<P>(Component:ComponentType<P>) {\n    function RedirectComponent(props:mapSTPType) {\n        const {isAuth, ...restProps}= props\n        if (!props.isAuth) return <Redirect to='/login'/>\n        return <Component {...restProps as P}/>\n    }\n    return connect(mapSTP)(RedirectComponent)\n}\n\n"],"names":["ProfileStatus","React","props","EditableSpan","className","s","defaultInputTitleValue","status","verificationRule","value","length","labelText","onKeyPress","e","inputTitle","key","updateStatus","id","Contacts","arrayJSX","i","Object","keys","entries","push","map","jsx","indexOf","ProfileViewMode","dispatch","useDispatch","useEffect","setFormSubmitStatus","profile","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","isOwner","onClick","setToEditMode","ProfileInfo","inputRef","useRef","imgRef","profileInfo","onMouseOver","current","onMouseLeave","style","cursor","undefined","click","src","photos","large","small","user","alt","ref","profileEditMode","ProfileEdit","setViewMode","setProfileEditMode","isFormSubmitSuccess","type","accept","onChange","target","files","savePhoto","Preloader","ProfileReduxForm","reduxForm","form","initialValues","Field","autoComplete","placeholder","name","component","Input","validate","maxLength50","onSubmit","handleSubmit","required","Textarea","maxLength200","borderRadius","formData","updateProfile","connect","Post","ava","message","like","likesCount","maxLength30","maxLengthCreator","MyPosts","postsElements","postData","post","AddPostFormRedux","values","addPostHandler","postTextArea","MyPostsContainer","state","profilePage","postsData","newPostTitle","newPost","addPost","Profile","ProfileContainer","this","match","params","userId","history","getProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","withRouter","withAuthRedirect","useState","setInputTitle","editableSpanVision","setEditableSpanVision","inputPagination","autoFocus","currentTarget","onBlur","title","pagination","mapSTP","isAuth","login","Component","restProps","to"],"sourceRoot":""}