{"version":3,"file":"static/js/5.329eaa09.chunk.js","mappings":"gLACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAA4I,0BAA5I,EAAyL,kCAAzL,EAAwO,4BCAxO,EAAyB,4BAAzB,EAA8D,4B,6BCQjDA,EAAa,SAACC,GACvB,OAAO,iBAAKC,UAAWC,EAAW,IAAMA,EAAjC,WACH,gBAAKC,IAAKC,EAAAA,EAAKC,IAAK,YACpB,SAAC,KAAD,CAASC,GAAE,mBAAcN,EAAMO,IAAMN,UAAW,SAACO,GAAD,OAC5CA,EAAUN,EAAUA,GADxB,SACmCF,EAAMS,WCZjD,EAAqB,oBAArB,EAA+C,qBAA/C,EAA6E,wBAA7E,EAA4G,sBCG/FC,EAAU,SAACV,GAIpB,MAAwB,OAAjBA,EAAMW,QAAkB,iBAAKV,UAAWC,EAAhB,WAAsB,wBACjD,iBAAKD,UAAWC,EAAhB,WAA0B,gBAAKC,IAAKC,EAAAA,EAAKC,IAAK,WAAYL,EAAMW,aAEhE,gBAAKV,UAAWC,EAAhB,SAAyBF,EAAMY,WAC1B,iBAAKX,UAAWC,EAAhB,WACL,gBAAKD,UAAWC,EAAhB,SAAyBF,EAAMY,QAC/B,wBACI,iBAAKX,UAAWC,EAAhB,WAA0B,gBAAKC,IAAKC,EAAAA,EAAKC,IAAK,WAAYL,EAAMW,gB,uCCd5E,EAAyB,+BAAzB,EAA+D,6BAA/D,EAAoG,8BCI9FE,GAAYC,EAAAA,EAAAA,IAAiB,KC6B7BC,GAAoBC,EAAAA,EAAAA,GAAU,CAACC,KAAK,wBAAhBD,ED5BI,SAAChB,GAC3B,OACI,kBAAMkB,SAAUlB,EAAMmB,aAAclB,UAAWC,EAA/C,WACI,0BACI,mBAAQD,UAAWC,EAAnB,4BAEJ,0BAAK,SAACkB,EAAA,EAAD,CAAOnB,UAAWC,EAASmB,UAAWC,EAAAA,GAAUb,KAAK,kBAAkBc,YAAY,iBAC5EC,SAAU,CAACC,EAAAA,GAAUZ,a,mBEDhCa,GACTC,E,QAAAA,KAA2BC,EAAAA,EAAAA,KALP,SAACC,GAAD,MAAuB,CAACC,aAAcD,EAAMC,iBACzC,SAACC,GAAD,MAA6C,CAChEC,kBAAmB,SAACC,GAAD,OAAuBF,GAASG,EAAAA,EAAAA,GAAaD,SAGIE,EAAAA,EAAxER,EDCmB,SAAC3B,GACpB,IAAMoC,EAAkBpC,EAAM8B,aAAaO,YAAYC,KAAI,SAAAC,GAAM,OAC7D,SAACxC,EAAD,CAA4BU,KAAM8B,EAAO9B,KAAMF,GAAIgC,EAAOhC,IAAzCgC,EAAOhC,OACtBiC,EAAmBxC,EAAM8B,aAAaW,YAAYH,KAAI,SAAAI,GAAO,OAC/D,SAAChC,EAAD,CAA0BC,OAAQ+B,EAAQ/B,OAAQC,KAAM8B,EAAQ9B,MAAlD8B,EAAQnC,OAI1B,OACI,iBAAKN,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKkC,KAEL,iBAAKnC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UAA8B,SAACa,EAAD,CAAqBG,SAT3C,SAACyB,GACjB3C,EAAMgC,kBAAkBW,EAAOC,uBASvB,gBAAK3C,UAAWC,EAAhB,SAAqCsC,c,gIEvB/CK,EAAO,SAAChB,GAAD,MAA+B,CAACiB,SAAUjB,EAAMkB,KAAKC,QAC3D,SAASb,EAAoBc,GAMhC,OAAOrB,EAAAA,EAAAA,IAAQiB,EAARjB,EALP,SAA2B5B,GACOA,EAAvB8C,OAAP,IAAkBI,GAAlB,OAA8BlD,EAA9B,GACA,OAAKA,EAAM8C,QACJ,SAACG,GAAD,UAAeC,KADI,SAAC,KAAD,CAAU5C,GAAG","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/DialogItem/DialogsItem.module.css?ac9e","components/Dialogs/DialogItem/DialogItem.tsx","webpack://samurai-way/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","webpack://samurai-way/./src/components/Dialogs/AddMessageForm.module.css?db09","components/Dialogs/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"active\":\"Dialogs_active__t8cjl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"messagesElements\":\"Dialogs_messagesElements__CpQsI\",\"addMessage\":\"Dialogs_addMessage__GG1Lt\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogsItem_dialog__hJrVm\",\"active\":\"DialogsItem_active__YbyKO\"};","import s from \"./DialogsItem.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport React from \"react\";\nimport ava from '../../../assets/images/user.svg'\n\nexport type DialogProps = {\n    name: string;\n    id: number\n}\nexport const DialogItem = (props: DialogProps) => {\n    return <div className={s.dialog + ' ' + s.active}>\n        <img src={ava} alt={'avatar'}/>\n        <NavLink to={`/dialogs/${props.id}`} className={(isActive)=>\n            isActive? s.active: s.dialog}>{props.name}</NavLink>\n    </div>\n}","// extracted by mini-css-extract-plugin\nexport default {\"me\":\"Message_me__fBVJ5\",\"you\":\"Message_you__4gxUS\",\"author\":\"Message_author__W4USY\",\"text\":\"Message_text__yBfK4\"};","import s from \"./Message.module.css\";\nimport React from \"react\";\nimport ava from '../../../assets/images/user.svg'\n\nexport const Message = (props: {\n    author: string,\n    text: string\n}) => {\n    return props.author === 'me' ? <div className={s.me}><b>\n        <div className={s.author}><img src={ava} alt={'avatar'}/>{props.author}</div>\n    </b>\n        <div className={s.text}>{props.text}</div>\n    </div> : <div className={s.you}>\n        <div className={s.text}>{props.text}</div>\n        <b>\n            <div className={s.author}><img src={ava} alt={'avatar'}/>{props.author}</div>\n        </b></div>\n}","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"AddMessageForm_button__GaXu1\",\"form\":\"AddMessageForm_form__x4eeq\",\"input\":\"AddMessageForm_input__nvOhR\"};","import {Field, InjectedFormProps} from \"redux-form\";\nimport React from \"react\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\nimport s from './AddMessageForm.module.css'\nconst maxLength50=maxLengthCreator(500);\nexport const AddMessageForm = (props: InjectedFormProps) => {\n    return (\n        <form onSubmit={props.handleSubmit} className={s.form}>\n            <div>\n                <button className={s.button}>Add message</button>\n            </div>\n            <div><Field className={s.input} component={Textarea} name='dialogsTextArea' placeholder='Dialog message'\n                        validate={[required, maxLength50]}></Field></div>\n\n        </form>\n    )\n}","import React, {ChangeEvent} from \"react\";\nimport s from './Dialogs.module.css'\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Message} from \"./Message/Message\";\nimport {MessageType} from \"../../Redux/redux_store\";\nimport {reduxForm} from \"redux-form\";\nimport {AddMessageForm} from \"./AddMessageForm\";\n\nexport type DialogsPropsType = {\n    messagesPage: MessageType\n    inputMessageHandler: (event: ChangeEvent<HTMLTextAreaElement>) => void,\n    addMessageHandler: (newMessage:string) => void\n}\n\nexport const Dialogs = (props: DialogsPropsType) => {\n    const dialogsElements = props.messagesPage.dialogsData.map(dialog =>\n        <DialogItem key={dialog.id} name={dialog.name} id={dialog.id}/>)\n    const messagesElements = props.messagesPage.messageData.map(message =>\n        <Message key={message.id} author={message.author} text={message.text}/>)\n    const addNewMessage=(values: any)=>{\n        props.addMessageHandler(values.dialogsTextArea)\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div className={s.addMessage}><AddMessageFormRedux onSubmit={addNewMessage}/></div>\n                <div className={s.messagesElements}>{messagesElements}</div>\n            </div>\n        </div>\n    )\n}\nconst AddMessageFormRedux=reduxForm({form:'dialogAddMessageForm'})(AddMessageForm)","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Dialogs} from \"./Dialogs\";\nimport {addMessageAC} from \"../../Redux/dialogs_reducer\";\nimport {ActionType, StateType} from \"../../Redux/redux_store\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nconst mapStateToProps = (state: StateType) => ({messagesPage: state.messagesPage})\nconst mapDispatchToProps = (dispatch: (action: ActionType) => void) => ({\n        addMessageHandler: (newMessage:string) => dispatch(addMessageAC(newMessage))\n    })\nexport const DialogsContainer =\n    compose<React.ElementType>(connect(mapStateToProps, mapDispatchToProps),withAuthRedirect)(Dialogs)\n","import {Redirect} from \"react-router-dom\";\nimport React, {ComponentType} from \"react\";\nimport {StateType} from \"../Redux/redux_store\";\nimport {connect} from \"react-redux\";\ntype mapSTPType = {isAuth:boolean}\n\nconst mapSTP=(state:StateType):mapSTPType=>({isAuth: !!state.auth.login})\nexport function withAuthRedirect<P>(Component:ComponentType<P>) {\n    function RedirectComponent(props:mapSTPType) {\n        const {isAuth, ...restProps}= props\n        if (!props.isAuth) return <Redirect to='/login'/>\n        return <Component {...restProps as P}/>\n    }\n    return connect(mapSTP)(RedirectComponent)\n}\n\n"],"names":["DialogItem","props","className","s","src","ava","alt","to","id","isActive","name","Message","author","text","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","DialogsContainer","compose","connect","state","messagesPage","dispatch","addMessageHandler","newMessage","addMessageAC","withAuthRedirect","dialogsElements","dialogsData","map","dialog","messagesElements","messageData","message","values","dialogsTextArea","mapSTP","isAuth","auth","login","Component","restProps"],"sourceRoot":""}